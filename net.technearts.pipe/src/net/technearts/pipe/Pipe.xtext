grammar net.technearts.pipe.Pipe hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate pipe "http://www.technearts.net/pipe/Pipe"

Model:
	elements+=AbstractElement*;

AbstractElement:
	Variable | EvalExpression;

EvalExpression:
	expression=Expression;

Variable:
	name=ID ATTR expression=Expression;

Expression:
	Piping;

Piping returns Expression:
	Or ({Pipe.left=current} PIPE right=Or)*;

Or returns Expression:
	And ({Or.left=current} _OR_ right=And)*;

And returns Expression:
	Equality ({And.left=current} _AND_ right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=(_EQ_ | _NE_) right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(_GT_ | _LT_ | _GE_ | _LE_) right=PlusOrMinus)*;

PlusOrMinus returns Expression:
	//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	MulOrDiv(({PlusOrMinus.left=current} op=('+' | '-')) right=MulOrDiv)*;

MulOrDiv returns Expression:
	Primary (({MulOrDiv.left=current} op=('*' | '/')) right=Primary)*;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Atomic |
	Atomic |
	{Array} '[' values+=Expression* ']' |
	{Map} '{' (key+=Key ATTR value+=Expression)* '}';

Atomic returns Expression:
	ReferenceWord |
	NumberConstant |
	StringConstant |
	BoolConstant |
	VariableRef |
	PatternMatch |
	FileConstant;

PatternMatch:
	pattern=('?:' | ':?' | '?:?' | '?' | ID_PATTERN);

VariableRef:
	variable=[Variable];

NumberConstant:
	value=NUMBER;

FileConstant:
	value=FILE;

StringConstant:
	value=STRING;

BoolConstant:
	value=BOOLEAN;

ReferenceWord:
	value=REFERENCE;

Key:
	ID | STRING | NUMBER | BOOLEAN;

terminal REFERENCE:
	'this' | 'import';

terminal ATTR:
	':';

terminal _OR_:
	'||' | 'or';

terminal _AND_:
	'&&' | 'and';

terminal _EQ_:
	'==' | 'eq';

terminal _NE_:
	'!=' | '<>' | 'ne';

terminal _LE_:
	'<=' | 'le';

terminal _LT_:
	'<' | 'lt';

terminal _GE_:
	'>=' | 'ge';

terminal _GT_:
	'>' | 'gt';

terminal BOOLEAN:
	'true' | 'false';

terminal PIPE:
	'|' | '|>';

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	
terminal ID_PATTERN:
	'?' '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*|
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*'?';

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')+ ('.' ('0'..'9')+)?;

terminal FILE:
	'\\\\' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.')+ ('\\' ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.')+)*;

terminal STRING:
	'"' ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | '"'))* '"' |
	"'" ('\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
